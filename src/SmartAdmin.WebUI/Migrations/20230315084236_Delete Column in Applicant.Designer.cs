// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartAdmin.WebUI.Entities;

namespace SmartAdmin.WebUI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230315084236_Delete Column in Applicant")]
    partial class DeleteColumninApplicant
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Entities.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AcceptanceStatus")
                        .HasColumnType("bit");

                    b.Property<string>("BirthCertificatePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("DocusAuthentic")
                        .HasColumnType("bit");

                    b.Property<string>("EmergencyContract1FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContract1RelationPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContract1RelationShip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContract2FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContract2RelationPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContract2RelationShip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FahterPassportPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyNationIDorFatherIqamaFronPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyNationIDorMotherIqamabackPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HasSiblingsAtRuya")
                        .HasColumnType("int");

                    b.Property<string>("MotherPassportPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("ReceivedAnyAward")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReceivedAnyAwardValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("RepecialNeed")
                        .HasColumnType("tinyint");

                    b.Property<string>("RepecialNeedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuyaschoolAdministrationalFeesPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolSystemCurrentlyForStudent")
                        .HasColumnType("int");

                    b.Property<byte?>("SepecialEducation")
                        .HasColumnType("tinyint");

                    b.Property<string>("SepecialEducationValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("SkipeedRepeatedGrade")
                        .HasColumnType("tinyint");

                    b.Property<string>("SkipeedRepeatedGradeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student64PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StudentBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentCurrentLevel")
                        .HasColumnType("int");

                    b.Property<string>("StudentCurrentSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFirstLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFirstNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFirstNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentImmunizationRecordPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentIqamaPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentMostGradeTranscriptPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPassportPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentUpcomingSchoolLevel")
                        .HasColumnType("int");

                    b.Property<string>("Student_IdORIqama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentmedicalClearanceCertificatePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Submited")
                        .HasColumnType("bit");

                    b.Property<byte?>("SufferFromPreviousFactor")
                        .HasColumnType("tinyint");

                    b.Property<string>("SufferFromPreviousFactorValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TuitionPaymentMethods")
                        .HasColumnType("int");

                    b.Property<Guid?>("TuitionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("enrollment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TuitionPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Entities.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FatherEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherFamilyNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherFamilyNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherFirstNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherFirstNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMiddleNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMiddleNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FatherNationality")
                        .HasColumnType("int");

                    b.Property<string>("FatherOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherPlaceOfWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FatherRegion")
                        .HasColumnType("int");

                    b.Property<string>("FatherWorkNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Father_IdORIqama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherFamilyNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherFirstNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMiddleNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotherNationality")
                        .HasColumnType("int");

                    b.Property<string>("MotherOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPlaceOfWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotherRegion")
                        .HasColumnType("int");

                    b.Property<string>("MotherWorkNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mother_IdORIqama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("submited")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Entities.RuyaDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("displayNameToUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("displayNameToUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RuyaDocuments");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Entities.TuitionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TuitionPaymentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TuitionPaymentPlanImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TuitionPlans");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAdmin.WebUI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Entities.Applicant", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Entities.Parent", "Parent")
                        .WithMany("Applicants")
                        .HasForeignKey("ParentId");

                    b.HasOne("SmartAdmin.WebUI.Entities.TuitionPlan", "TuitionPlan")
                        .WithMany("TuitionPlans")
                        .HasForeignKey("TuitionPlanId");

                    b.HasOne("SmartAdmin.WebUI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Entities.Parent", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
